{"ast":null,"code":"import React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Output(props) {\n  var status = props.status,\n      image = props.image,\n      predictions = props.predictions,\n      error = props.error;\n  var output;\n\n  if (!error) {\n    if (status === \"modelReady\" && !image) output = _jsx(Text, {\n      style: styles.placeholder,\n      children: \"\\u2191\"\n    });else if (status === \"finished\") {\n      output = _jsx(ImageBackground, {\n        source: image,\n        blurRadius: 20,\n        style: styles.predictedImage,\n        imageStyle: styles.predictedImageExtras,\n        children: _jsxs(View, {\n          style: {\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            width: \"100%\",\n            height: \"100%\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            borderRadius: 20\n          },\n          children: [_jsxs(Text, {\n            style: styles.predictedNumberHeader,\n            children: [\"Probability of melanoma:\", \" \"]\n          }), _jsxs(Text, {\n            style: styles.predictedNumber,\n            children: [Math.round(predictions.dataSync()[0] * 100), \" \", _jsx(Text, {\n              style: styles.predictedNumberPercentage,\n              children: \" %\"\n            })]\n          })]\n        })\n      });\n    } else output = _jsx(ActivityIndicator, {\n      size: \"large\",\n      animating: true\n    });\n  } else output = _jsx(Text, {\n    children: \"Please try again\"\n  });\n\n  return output;\n}\nvar styles = StyleSheet.create({\n  predictedImage: {\n    width: \"100%\",\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  placeholder: {\n    fontSize: 50\n  },\n  predictedImageExtras: {\n    borderRadius: 20\n  },\n  predictedNumberHeader: {\n    fontSize: 12,\n    color: \"white\"\n  },\n  predictedNumberPercentage: {\n    fontSize: 24,\n    color: \"white\"\n  },\n  predictedNumber: {\n    fontSize: 64,\n    fontWeight: \"bold\",\n    color: \"darkorange\",\n    shadowOpacity: 0.75,\n    shadowRadius: 5,\n    shadowColor: \"black\",\n    shadowOffset: {\n      height: 10,\n      width: 10\n    }\n  }\n});","map":{"version":3,"names":["React","Output","props","status","image","predictions","error","output","styles","placeholder","predictedImage","predictedImageExtras","backgroundColor","width","height","alignItems","justifyContent","borderRadius","predictedNumberHeader","predictedNumber","Math","round","dataSync","predictedNumberPercentage","StyleSheet","create","fontSize","color","fontWeight","shadowOpacity","shadowRadius","shadowColor","shadowOffset"],"sources":["D:/Projectos/Cacao/cacaotech-expo/Output.tsx"],"sourcesContent":["\r\n\r\nimport React from \"react\";\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    ImageBackground,\r\n    View,\r\n    ActivityIndicator,\r\n} from \"react-native\";\r\n\r\nexport default function Output(props: any) {\r\n    const { status, image, predictions, error } = props;\r\n    let output;\r\n\r\n    if (!error) {\r\n        if (status === \"modelReady\" && !image)\r\n            output = <Text style={styles.placeholder}>&uarr;</Text>;\r\n        else if (status === \"finished\") {\r\n            output = (\r\n                <ImageBackground\r\n                    source={image}\r\n                    blurRadius={20}\r\n                    style={styles.predictedImage}\r\n                    imageStyle={styles.predictedImageExtras}\r\n                >\r\n                    <View\r\n                        style={{\r\n                            backgroundColor: \"rgba(0,0,0,0.5)\",\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            borderRadius: 20,\r\n                        }}\r\n                    >\r\n                        <Text style={styles.predictedNumberHeader}>\r\n                            Probability of melanoma:{\" \"}\r\n                        </Text>\r\n                        <Text style={styles.predictedNumber}>\r\n                            {Math.round(predictions.dataSync()[0] * 100)}{\" \"}\r\n                            {/* convert tensor into array and access the first category probability*/}\r\n                            <Text style={styles.predictedNumberPercentage}> %</Text>\r\n                        </Text>\r\n                    </View>\r\n                </ImageBackground>\r\n            );\r\n        } else output = <ActivityIndicator size=\"large\" animating={true} />;\r\n    } else output = <Text>Please try again</Text>;\r\n\r\n    return output;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    predictedImage: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    placeholder: { fontSize: 50 },\r\n    predictedImageExtras: { borderRadius: 20 },\r\n    predictedNumberHeader: { fontSize: 12, color: \"white\" },\r\n    predictedNumberPercentage: { fontSize: 24, color: \"white\" },\r\n    predictedNumber: {\r\n        fontSize: 64,\r\n        fontWeight: \"bold\",\r\n        color: \"darkorange\",\r\n        shadowOpacity: 0.75,\r\n        shadowRadius: 5,\r\n        shadowColor: \"black\",\r\n        shadowOffset: { height: 10, width: 10 },\r\n    },\r\n});"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AASA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAA4B;EACvC,IAAQC,MAAR,GAA8CD,KAA9C,CAAQC,MAAR;EAAA,IAAgBC,KAAhB,GAA8CF,KAA9C,CAAgBE,KAAhB;EAAA,IAAuBC,WAAvB,GAA8CH,KAA9C,CAAuBG,WAAvB;EAAA,IAAoCC,KAApC,GAA8CJ,KAA9C,CAAoCI,KAApC;EACA,IAAIC,MAAJ;;EAEA,IAAI,CAACD,KAAL,EAAY;IACR,IAAIH,MAAM,KAAK,YAAX,IAA2B,CAACC,KAAhC,EACIG,MAAM,GAAG,KAAC,IAAD;MAAM,KAAK,EAAEC,MAAM,CAACC,WAApB;MAAA;IAAA,EAAT,CADJ,KAEK,IAAIN,MAAM,KAAK,UAAf,EAA2B;MAC5BI,MAAM,GACF,KAAC,eAAD;QACI,MAAM,EAAEH,KADZ;QAEI,UAAU,EAAE,EAFhB;QAGI,KAAK,EAAEI,MAAM,CAACE,cAHlB;QAII,UAAU,EAAEF,MAAM,CAACG,oBAJvB;QAAA,UAMI,MAAC,IAAD;UACI,KAAK,EAAE;YACHC,eAAe,EAAE,iBADd;YAEHC,KAAK,EAAE,MAFJ;YAGHC,MAAM,EAAE,MAHL;YAIHC,UAAU,EAAE,QAJT;YAKHC,cAAc,EAAE,QALb;YAMHC,YAAY,EAAE;UANX,CADX;UAAA,WAUI,MAAC,IAAD;YAAM,KAAK,EAAET,MAAM,CAACU,qBAApB;YAAA,uCAC6B,GAD7B;UAAA,EAVJ,EAaI,MAAC,IAAD;YAAM,KAAK,EAAEV,MAAM,CAACW,eAApB;YAAA,WACKC,IAAI,CAACC,KAAL,CAAWhB,WAAW,CAACiB,QAAZ,GAAuB,CAAvB,IAA4B,GAAvC,CADL,EACkD,GADlD,EAGI,KAAC,IAAD;cAAM,KAAK,EAAEd,MAAM,CAACe,yBAApB;cAAA;YAAA,EAHJ;UAAA,EAbJ;QAAA;MANJ,EADJ;IA4BH,CA7BI,MA6BEhB,MAAM,GAAG,KAAC,iBAAD;MAAmB,IAAI,EAAC,OAAxB;MAAgC,SAAS,EAAE;IAA3C,EAAT;EACV,CAjCD,MAiCOA,MAAM,GAAG,KAAC,IAAD;IAAA;EAAA,EAAT;;EAEP,OAAOA,MAAP;AACH;AAED,IAAMC,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;EAC7Bf,cAAc,EAAE;IACZG,KAAK,EAAE,MADK;IAEZC,MAAM,EAAE,MAFI;IAGZC,UAAU,EAAE,QAHA;IAIZC,cAAc,EAAE;EAJJ,CADa;EAO7BP,WAAW,EAAE;IAAEiB,QAAQ,EAAE;EAAZ,CAPgB;EAQ7Bf,oBAAoB,EAAE;IAAEM,YAAY,EAAE;EAAhB,CARO;EAS7BC,qBAAqB,EAAE;IAAEQ,QAAQ,EAAE,EAAZ;IAAgBC,KAAK,EAAE;EAAvB,CATM;EAU7BJ,yBAAyB,EAAE;IAAEG,QAAQ,EAAE,EAAZ;IAAgBC,KAAK,EAAE;EAAvB,CAVE;EAW7BR,eAAe,EAAE;IACbO,QAAQ,EAAE,EADG;IAEbE,UAAU,EAAE,MAFC;IAGbD,KAAK,EAAE,YAHM;IAIbE,aAAa,EAAE,IAJF;IAKbC,YAAY,EAAE,CALD;IAMbC,WAAW,EAAE,OANA;IAObC,YAAY,EAAE;MAAElB,MAAM,EAAE,EAAV;MAAcD,KAAK,EAAE;IAArB;EAPD;AAXY,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}