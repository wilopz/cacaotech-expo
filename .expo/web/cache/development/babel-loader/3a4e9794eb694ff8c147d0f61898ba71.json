{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"onContextCreate\", \"onContextRestored\", \"onContextLost\", \"webglContextAttributes\", \"msaaSamples\", \"nativeRef_EXPERIMENTAL\", \"ref\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Canvas from \"./Canvas\";\n\nfunction getImageForAsset(asset) {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    var dataURI = asset.localUri || asset.uri || '';\n    var image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n\n  return asset;\n}\n\nfunction isOffscreenCanvas(element) {\n  return element && typeof element.convertToBlob === 'function';\n}\n\nfunction asExpoContext(gl) {\n  gl.endFrameEXP = function glEndFrameEXP() {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n\n    gl.texImage2D = function () {\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n\n    gl.texSubImage2D = function () {\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      var nextProps = [].concat(props);\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'].apply(gl, _toConsumableArray(nextProps));\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(canvas, contextAttributes) {\n  if (!canvas) {\n    throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n  }\n\n  var isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n  var context = !isIOS && canvas.getContext('webgl2', contextAttributes) || canvas.getContext('webgl', contextAttributes) || canvas.getContext('webgl-experimental', contextAttributes) || canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context);\n}\n\nfunction getBlobFromWebGLRenderingContext(gl) {\n  var options,\n      canvas,\n      blob,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getBlobFromWebGLRenderingContext$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n          canvas = gl.canvas;\n          blob = null;\n\n          if (!(typeof canvas.msToBlob === 'function')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(canvas.msToBlob());\n\n        case 7:\n          blob = _context.sent;\n          _context.next = 19;\n          break;\n\n        case 10:\n          if (!isOffscreenCanvas(canvas)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(canvas.convertToBlob({\n            quality: options.compress,\n            type: options.format\n          }));\n\n        case 13:\n          blob = _context.sent;\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n            canvas.toBlob(function (blob) {\n              return resolve(blob);\n            }, options.format, options.compress);\n          }));\n\n        case 18:\n          blob = _context.sent;\n\n        case 19:\n          return _context.abrupt(\"return\", {\n            blob: blob,\n            width: canvas.width,\n            height: canvas.height\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport var GLView = function (_React$Component) {\n  _inherits(GLView, _React$Component);\n\n  var _super = _createSuper(GLView);\n\n  function GLView() {\n    var _this;\n\n    _classCallCheck(this, GLView);\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onContextLost = function (event) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      _this.gl = undefined;\n\n      if (typeof _this.props.onContextLost === 'function') {\n        _this.props.onContextLost();\n      }\n    };\n\n    _this.onContextRestored = function () {\n      _this.gl = undefined;\n\n      if (_this.getGLContext() == null) {\n        throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n      }\n    };\n\n    _this.setCanvasRef = function (canvas) {\n      _this.canvas = canvas;\n\n      if (typeof _this.props.nativeRef_EXPERIMENTAL === 'function') {\n        _this.props.nativeRef_EXPERIMENTAL(canvas);\n      }\n\n      if (_this.canvas) {\n        _this.canvas.addEventListener('webglcontextlost', _this.onContextLost);\n\n        _this.canvas.addEventListener('webglcontextrestored', _this.onContextRestored);\n\n        _this.getGLContext();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(GLView, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.gl) {\n        var loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n\n        if (loseContextExt) {\n          loseContextExt.loseContext();\n        }\n\n        this.gl = undefined;\n      }\n\n      if (this.canvas) {\n        this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n        this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onContextCreate = _this$props.onContextCreate,\n          onContextRestored = _this$props.onContextRestored,\n          onContextLost = _this$props.onContextLost,\n          webglContextAttributes = _this$props.webglContextAttributes,\n          msaaSamples = _this$props.msaaSamples,\n          nativeRef_EXPERIMENTAL = _this$props.nativeRef_EXPERIMENTAL,\n          ref = _this$props.ref,\n          domProps = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(Canvas, _objectSpread(_objectSpread({}, domProps), {}, {\n        canvasRef: this.setCanvasRef\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var webglContextAttributes = this.props.webglContextAttributes;\n\n      if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n        this.onContextLost(null);\n        this.onContextRestored();\n      }\n    }\n  }, {\n    key: \"getGLContextOrReject\",\n    value: function getGLContextOrReject() {\n      var gl = this.getGLContext();\n\n      if (!gl) {\n        throw new CodedError('ERR_GL_INVALID', 'Attempting to use the GL context before it has been created.');\n      }\n\n      return gl;\n    }\n  }, {\n    key: \"getGLContext\",\n    value: function getGLContext() {\n      if (this.gl) return this.gl;\n\n      if (this.canvas) {\n        this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n\n        if (typeof this.props.onContextCreate === 'function') {\n          this.props.onContextCreate(this.gl);\n        }\n\n        return this.gl;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"takeSnapshotAsync\",\n    value: function takeSnapshotAsync() {\n      var options,\n          gl,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function takeSnapshotAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n              if (GLView.takeSnapshotAsync) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n\n            case 3:\n              gl = this.getGLContextOrReject();\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(GLView.takeSnapshotAsync(gl, options));\n\n            case 6:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"startARSessionAsync\",\n    value: function startARSessionAsync() {\n      return _regeneratorRuntime.async(function startARSessionAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'startARSessionAsync');\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"createCameraTextureAsync\",\n    value: function createCameraTextureAsync() {\n      return _regeneratorRuntime.async(function createCameraTextureAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"destroyObjectAsync\",\n    value: function destroyObjectAsync(glObject) {\n      return _regeneratorRuntime.async(function destroyObjectAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }], [{\n    key: \"createContextAsync\",\n    value: function createContextAsync() {\n      var canvas, _Dimensions$get, width, height, scale;\n\n      return _regeneratorRuntime.async(function createContextAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", null);\n\n            case 2:\n              canvas = document.createElement('canvas');\n              _Dimensions$get = Dimensions.get('window'), width = _Dimensions$get.width, height = _Dimensions$get.height, scale = _Dimensions$get.scale;\n              canvas.width = width * scale;\n              canvas.height = height * scale;\n              return _context6.abrupt(\"return\", ensureContext(canvas));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"destroyContextAsync\",\n    value: function destroyContextAsync(exgl) {\n      return _regeneratorRuntime.async(function destroyContextAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", true);\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"takeSnapshotAsync\",\n    value: function takeSnapshotAsync(gl) {\n      var options,\n          _await$getBlobFromWeb,\n          blob,\n          width,\n          height,\n          _args8 = arguments;\n\n      return _regeneratorRuntime.async(function takeSnapshotAsync$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(getBlobFromWebGLRenderingContext(gl, options));\n\n            case 3:\n              _await$getBlobFromWeb = _context8.sent;\n              blob = _await$getBlobFromWeb.blob;\n              width = _await$getBlobFromWeb.width;\n              height = _await$getBlobFromWeb.height;\n\n              if (blob) {\n                _context8.next = 9;\n                break;\n              }\n\n              throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n\n            case 9:\n              return _context8.abrupt(\"return\", {\n                uri: blob,\n                localUri: '',\n                width: width,\n                height: height\n              });\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return GLView;\n}(React.Component);","map":{"version":3,"sources":["../src/GLView.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nimport Canvas from './Canvas';\nimport { WebGLObject } from './GLView';\nimport {\n  BaseGLViewProps,\n  ComponentOrHandle,\n  ExpoWebGLRenderingContext,\n  GLSnapshot,\n  SnapshotOptions,\n} from './GLView.types';\n\nfunction getImageForAsset(asset: {\n  downloadAsync: () => Promise<any>;\n  uri?: string;\n  localUri?: string;\n}): HTMLImageElement | any {\n  if (asset != null && typeof asset === 'object' && asset !== null && asset.downloadAsync) {\n    const dataURI = asset.localUri || asset.uri || '';\n    const image = new Image();\n    image.src = dataURI;\n    return image;\n  }\n  return asset;\n}\n\nfunction isOffscreenCanvas(element: any): element is OffscreenCanvas {\n  return element && typeof element.convertToBlob === 'function';\n}\n\nfunction asExpoContext(gl: ExpoWebGLRenderingContext): WebGLRenderingContext {\n  gl.endFrameEXP = function glEndFrameEXP(): void {};\n\n  if (!gl['_expo_texImage2D']) {\n    gl['_expo_texImage2D'] = gl.texImage2D;\n    gl.texImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texImage2D'](...nextProps);\n    };\n  }\n\n  if (!gl['_expo_texSubImage2D']) {\n    gl['_expo_texSubImage2D'] = gl.texSubImage2D;\n    gl.texSubImage2D = (...props: any[]): any => {\n      const nextProps = [...props];\n      nextProps.push(getImageForAsset(nextProps.pop()));\n      return gl['_expo_texSubImage2D'](...nextProps);\n    };\n  }\n\n  return gl;\n}\n\nfunction ensureContext(\n  canvas?: HTMLCanvasElement,\n  contextAttributes?: WebGLContextAttributes\n): WebGLRenderingContext {\n  if (!canvas) {\n    throw new CodedError(\n      'ERR_GL_INVALID',\n      'Attempting to use the GL context before it has been created.'\n    );\n  }\n\n  // Apple disables WebGL 2.0 and doesn't provide any way to detect if it's disabled.\n  const isIOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n\n  const context =\n    (!isIOS && canvas.getContext('webgl2', contextAttributes)) ||\n    canvas.getContext('webgl', contextAttributes) ||\n    canvas.getContext('webgl-experimental', contextAttributes) ||\n    canvas.getContext('experimental-webgl', contextAttributes);\n  invariant(context, 'Browser does not support WebGL');\n  return asExpoContext(context as ExpoWebGLRenderingContext);\n}\n\nexport interface GLViewProps extends BaseGLViewProps {\n  onContextCreate: (gl: WebGLRenderingContext) => void;\n  onContextRestored?: (gl?: WebGLRenderingContext) => void;\n  onContextLost?: () => void;\n  webglContextAttributes?: WebGLContextAttributes;\n  /**\n   * [iOS only] Number of samples for Apple's built-in multisampling.\n   */\n  msaaSamples: number;\n\n  /**\n   * A ref callback for the native GLView\n   */\n  nativeRef_EXPERIMENTAL?(callback: ComponentOrHandle | HTMLCanvasElement | null);\n}\n\nasync function getBlobFromWebGLRenderingContext(\n  gl: WebGLRenderingContext,\n  options: SnapshotOptions = {}\n): Promise<{ width: number; height: number; blob: Blob | null }> {\n  invariant(gl, 'getBlobFromWebGLRenderingContext(): WebGL Rendering Context is not defined');\n\n  const { canvas } = gl;\n\n  let blob: Blob | null = null;\n\n  if (typeof (canvas as any).msToBlob === 'function') {\n    // @ts-ignore: polyfill: https://stackoverflow.com/a/29815058/4047926\n    blob = await canvas.msToBlob();\n  } else if (isOffscreenCanvas(canvas)) {\n    blob = await canvas.convertToBlob({ quality: options.compress, type: options.format });\n  } else {\n    blob = await new Promise((resolve) => {\n      canvas.toBlob((blob: Blob | null) => resolve(blob), options.format, options.compress);\n    });\n  }\n\n  return {\n    blob,\n    width: canvas.width,\n    height: canvas.height,\n  };\n}\n\nexport class GLView extends React.Component<GLViewProps> {\n  canvas?: HTMLCanvasElement;\n\n  gl?: WebGLRenderingContext;\n\n  static async createContextAsync(): Promise<WebGLRenderingContext | null> {\n    if (!Platform.isDOMAvailable) {\n      return null;\n    }\n    const canvas = document.createElement('canvas');\n    const { width, height, scale } = Dimensions.get('window');\n    canvas.width = width * scale;\n    canvas.height = height * scale;\n    return ensureContext(canvas);\n  }\n\n  static async destroyContextAsync(exgl?: WebGLRenderingContext | number): Promise<boolean> {\n    // Do nothing\n    return true;\n  }\n\n  static async takeSnapshotAsync(\n    gl: WebGLRenderingContext,\n    options: SnapshotOptions = {}\n  ): Promise<GLSnapshot> {\n    const { blob, width, height } = await getBlobFromWebGLRenderingContext(gl, options);\n\n    if (!blob) {\n      throw new CodedError('ERR_GL_SNAPSHOT', 'Failed to save the GL context');\n    }\n\n    return {\n      uri: blob,\n      localUri: '',\n      width,\n      height,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.gl) {\n      const loseContextExt = this.gl.getExtension('WEBGL_lose_context');\n      if (loseContextExt) {\n        loseContextExt.loseContext();\n      }\n      this.gl = undefined;\n    }\n    if (this.canvas) {\n      this.canvas.removeEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.removeEventListener('webglcontextrestored', this.onContextRestored);\n    }\n  }\n\n  render() {\n    const {\n      onContextCreate,\n      onContextRestored,\n      onContextLost,\n      webglContextAttributes,\n      msaaSamples,\n      nativeRef_EXPERIMENTAL,\n      // @ts-ignore: ref does not exist\n      ref,\n      ...domProps\n    } = this.props;\n\n    return <Canvas {...domProps} canvasRef={this.setCanvasRef} />;\n  }\n\n  componentDidUpdate(prevProps: GLViewProps) {\n    const { webglContextAttributes } = this.props;\n    if (this.canvas && webglContextAttributes !== prevProps.webglContextAttributes) {\n      this.onContextLost(null);\n      this.onContextRestored();\n    }\n  }\n\n  private getGLContextOrReject(): WebGLRenderingContext {\n    const gl = this.getGLContext();\n    if (!gl) {\n      throw new CodedError(\n        'ERR_GL_INVALID',\n        'Attempting to use the GL context before it has been created.'\n      );\n    }\n    return gl;\n  }\n\n  private onContextLost = (event: Event | null): void => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.gl = undefined;\n\n    if (typeof this.props.onContextLost === 'function') {\n      this.props.onContextLost();\n    }\n  };\n\n  private onContextRestored = (): void => {\n    this.gl = undefined;\n    if (this.getGLContext() == null) {\n      throw new CodedError('ERR_GL_INVALID', 'Failed to restore GL context.');\n    }\n  };\n\n  private getGLContext(): WebGLRenderingContext | null {\n    if (this.gl) return this.gl;\n\n    if (this.canvas) {\n      this.gl = ensureContext(this.canvas, this.props.webglContextAttributes);\n      if (typeof this.props.onContextCreate === 'function') {\n        this.props.onContextCreate(this.gl);\n      }\n      return this.gl;\n    }\n    return null;\n  }\n\n  private setCanvasRef = (canvas: HTMLCanvasElement): void => {\n    this.canvas = canvas;\n\n    if (typeof this.props.nativeRef_EXPERIMENTAL === 'function') {\n      this.props.nativeRef_EXPERIMENTAL(canvas);\n    }\n\n    if (this.canvas) {\n      this.canvas.addEventListener('webglcontextlost', this.onContextLost);\n      this.canvas.addEventListener('webglcontextrestored', this.onContextRestored);\n\n      this.getGLContext();\n    }\n  };\n\n  public async takeSnapshotAsync(options: SnapshotOptions = {}): Promise<GLSnapshot> {\n    if (!GLView.takeSnapshotAsync) {\n      throw new UnavailabilityError('expo-gl', 'takeSnapshotAsync');\n    }\n\n    const gl = this.getGLContextOrReject();\n    return await GLView.takeSnapshotAsync(gl, options);\n  }\n\n  public async startARSessionAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'startARSessionAsync');\n  }\n\n  public async createCameraTextureAsync(): Promise<void> {\n    throw new UnavailabilityError('GLView', 'createCameraTextureAsync');\n  }\n\n  public async destroyObjectAsync(glObject: WebGLObject): Promise<void> {\n    throw new UnavailabilityError('GLView', 'destroyObjectAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}