{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { fetch, bundleResourceIO } from \"@tensorflow/tfjs-react-native\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as jpeg from \"jpeg-js\";\nimport Output from \"./Output\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getPermissionAsync() {\n  var _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function getPermissionAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Constants.platform.ios) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));\n\n        case 3:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n\n          if (status !== \"granted\") {\n            alert(\"Permission for camera access required.\");\n          }\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction imageToTensor(source) {\n  var response, rawImageData, _jpeg$decode, width, height, data, buffer, offset, i, img, shorterSide, startingHeight, startingWidth, endingHeight, endingWidth, sliced_img, resized_img, expanded_img;\n\n  return _regeneratorRuntime.async(function imageToTensor$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(source.uri, {}, {\n            isBinary: true\n          }));\n\n        case 2:\n          response = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(response.arrayBuffer());\n\n        case 5:\n          rawImageData = _context2.sent;\n          _jpeg$decode = jpeg.decode(rawImageData, {\n            useTArray: true\n          }), width = _jpeg$decode.width, height = _jpeg$decode.height, data = _jpeg$decode.data;\n          buffer = new Uint8Array(width * height * 3);\n          offset = 0;\n\n          for (i = 0; i < buffer.length; i += 3) {\n            buffer[i] = data[offset];\n            buffer[i + 1] = data[offset + 1];\n            buffer[i + 2] = data[offset + 2];\n            offset += 4;\n          }\n\n          img = tf.tensor3d(buffer, [width, height, 3]);\n          shorterSide = Math.min(width, height);\n          startingHeight = (height - shorterSide) / 2;\n          startingWidth = (width - shorterSide) / 2;\n          endingHeight = startingHeight + shorterSide;\n          endingWidth = startingWidth + shorterSide;\n          sliced_img = img.slice([startingWidth, startingHeight, 0], [endingWidth, endingHeight, 3]);\n          resized_img = tf.image.resizeBilinear(sliced_img, [224, 224]);\n          expanded_img = resized_img.expandDims(0);\n          return _context2.abrupt(\"return\", expanded_img.toFloat().div(tf.scalar(127)).sub(tf.scalar(1)));\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isTfReady = _useState2[0],\n      setTfReady = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      model = _useState4[0],\n      setModel = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      predictions = _useState8[0],\n      setPredictions = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var model, weights, loadedModel;\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(tf.ready());\n\n            case 2:\n              setTfReady(true);\n              model = require(\"./assets/model.json\");\n              weights = require(\"./assets/weights.bin\");\n              _context3.next = 7;\n              return _regeneratorRuntime.awrap(tf.loadGraphModel(bundleResourceIO(model, weights)));\n\n            case 7:\n              loadedModel = _context3.sent;\n              setModel(loadedModel);\n              getPermissionAsync();\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function handlerSelectImage() {\n    var response, source, imageTensor, _predictions;\n\n    return _regeneratorRuntime.async(function handlerSelectImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              quality: 1,\n              aspect: [4, 3]\n            }));\n\n          case 3:\n            response = _context4.sent;\n\n            if (response.cancelled) {\n              _context4.next = 14;\n              break;\n            }\n\n            source = {\n              uri: response.uri\n            };\n            setImage(source);\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(imageToTensor(source));\n\n          case 9:\n            imageTensor = _context4.sent;\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(model.predict(imageTensor));\n\n          case 12:\n            _predictions = _context4.sent;\n            setPredictions(_predictions);\n\n          case 14:\n            _context4.next = 19;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](0);\n            setError(_context4.t0);\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  }\n\n  function reset() {\n    setPredictions(null);\n    setImage(null);\n    setError(false);\n  }\n\n  var status, statusMessage, showReset;\n\n  var resetLink = _jsx(Text, {\n    onPress: reset,\n    style: styles.reset,\n    children: \"Restart\"\n  });\n\n  if (!error) {\n    if (isTfReady && model && !image && !predictions) {\n      status = \"modelReady\";\n      statusMessage = \"Model is ready.\";\n    } else if (model && image && predictions) {\n      status = \"finished\";\n      statusMessage = \"Prediction finished.\";\n      showReset = true;\n    } else if (model && image && !predictions) {\n      status = \"modelPredict\";\n      statusMessage = \"Model is predicting...\";\n    } else {\n      status = \"modelLoad\";\n      statusMessage = \"Model is loading...\";\n    }\n  } else {\n    statusMessage = \"Unexpected error occured.\";\n    showReset = true;\n    console.log(error);\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.innercontainer,\n      children: [_jsxs(Text, {\n        style: styles.status,\n        children: [statusMessage, \" \", showReset ? resetLink : null]\n      }), _jsx(TouchableOpacity, {\n        style: styles.imageContainer,\n        onPress: model && !predictions ? handlerSelectImage : function () {},\n        children: _jsx(Output, {\n          status: status,\n          image: image,\n          predictions: predictions,\n          error: error\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#FFFFFF\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flex: 1\n  },\n  innercontainer: {\n    marginTop: -50,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  status: {\n    marginBottom: 10\n  },\n  reset: {\n    color: \"blue\"\n  },\n  imageContainer: {\n    width: 300,\n    height: 300,\n    borderRadius: 20,\n    opacity: 0.7,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"lightgrey\",\n    borderColor: \"white\",\n    borderWidth: 3,\n    borderStyle: \"dotted\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","tf","fetch","bundleResourceIO","Constants","Permissions","ImagePicker","jpeg","Output","getPermissionAsync","platform","ios","askAsync","CAMERA_ROLL","status","alert","imageToTensor","source","uri","isBinary","response","arrayBuffer","rawImageData","decode","useTArray","width","height","data","buffer","Uint8Array","offset","i","length","img","tensor3d","shorterSide","Math","min","startingHeight","startingWidth","endingHeight","endingWidth","sliced_img","slice","resized_img","image","resizeBilinear","expanded_img","expandDims","toFloat","div","scalar","sub","App","isTfReady","setTfReady","model","setModel","setImage","predictions","setPredictions","error","setError","ready","require","weights","loadGraphModel","loadedModel","handlerSelectImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","quality","aspect","cancelled","imageTensor","predict","reset","statusMessage","showReset","resetLink","styles","console","log","container","innercontainer","imageContainer","StyleSheet","create","backgroundColor","alignItems","justifyContent","flex","marginTop","marginBottom","color","borderRadius","opacity","borderColor","borderWidth","borderStyle"],"sources":["D:/Projectos/Cacao/cacaotech-expo/App.tsx"],"sourcesContent":["// import { StatusBar } from 'expo-status-bar';\n// import { StyleSheet, Text, View } from 'react-native';\n\n// export default function App() {\n//   return (\n//     <View style={styles.container}>\n//       <Text>Open up App.tsx to start working on your app!</Text>\n//       <Text> Hola Patricio!</Text>\n//       <StatusBar style=\"auto\" />\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { StyleSheet, View, TouchableOpacity, Text } from \"react-native\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { fetch, bundleResourceIO } from \"@tensorflow/tfjs-react-native\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as jpeg from \"jpeg-js\";\nimport Output from \"./Output\";\n\nasync function getPermissionAsync() {\n  if (Constants.platform.ios) {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n    if (status !== \"granted\") {\n      alert(\"Permission for camera access required.\");\n    }\n  }\n}\n\nasync function imageToTensor(source) {\n  // load the raw data of the selected image into an array\n  const response = await fetch(source.uri, {}, { isBinary: true });\n  const rawImageData = await response.arrayBuffer();\n  const { width, height, data } = jpeg.decode(rawImageData, {\n    useTArray: true, // Uint8Array = true\n  });\n\n  // remove the alpha channel:\n  const buffer = new Uint8Array(width * height * 3);\n  let offset = 0;\n  for (let i = 0; i < buffer.length; i += 3) {\n    buffer[i] = data[offset];\n    buffer[i + 1] = data[offset + 1];\n    buffer[i + 2] = data[offset + 2];\n    offset += 4;\n  }\n\n  // transform image data into a tensor\n  const img = tf.tensor3d(buffer, [width, height, 3]);\n\n  // calculate square center crop area\n  const shorterSide = Math.min(width, height);\n  const startingHeight = (height - shorterSide) / 2;\n  const startingWidth = (width - shorterSide) / 2;\n  const endingHeight = startingHeight + shorterSide;\n  const endingWidth = startingWidth + shorterSide;\n\n  // slice and resize the image\n  const sliced_img = img.slice(\n    [startingWidth, startingHeight, 0],\n    [endingWidth, endingHeight, 3]\n  );\n  const resized_img = tf.image.resizeBilinear(sliced_img, [224, 224]);\n\n  // add a fourth batch dimension to the tensor\n  const expanded_img = resized_img.expandDims(0);\n\n  // normalise the rgb values to -1-+1\n  return expanded_img.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n}\n\nexport default function App() {\n  const [isTfReady, setTfReady] = useState(false); // gets and sets the Tensorflow.js module loading status\n  const [model, setModel] = useState(null); // gets and sets the locally saved Tensorflow.js model\n  const [image, setImage] = useState(null); // gets and sets the image selected from the user\n  const [predictions, setPredictions] = useState(null); // gets and sets the predicted value from the model\n  const [error, setError] = useState(false); // gets and sets any errors\n\n  useEffect(() => {\n    (async () => {\n      await tf.ready(); // wait for Tensorflow.js to get ready\n      setTfReady(true); // set the state\n\n      // bundle the model files and load the model:\n      const model = require(\"./assets/model.json\");\n      const weights = require(\"./assets/weights.bin\");\n      const loadedModel = await tf.loadGraphModel(\n        bundleResourceIO(model, weights)\n      );\n\n      setModel(loadedModel); // load the model to the state\n      getPermissionAsync(); // get the permission for camera roll access for iOS users\n    })();\n  }, []);\n\n  async function handlerSelectImage() {\n    try {\n      let response = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true, // on Android user can rotate and crop the selected image; iOS users can only crop\n        quality: 1, // go for highest quality possible\n        aspect: [4, 3], // maintain aspect ratio of the crop area on Android; on iOS crop area is always a square\n      });\n\n      if (!response.cancelled) {\n        const source = { uri: response.uri };\n        setImage(source); // put image path to the state\n        const imageTensor = await imageToTensor(source); // prepare the image\n        const predictions = await model.predict(imageTensor); // send the image to the model\n        setPredictions(predictions); // put model prediction to the state\n      }\n    } catch (error) {\n      setError(error);\n    }\n  }\n\n  function reset() {\n    setPredictions(null);\n    setImage(null);\n    setError(false);\n  }\n\n  let status, statusMessage, showReset;\n  const resetLink = (\n    <Text onPress={reset} style={styles.reset}>\n      Restart\n    </Text>\n  );\n\n  if (!error) {\n    if (isTfReady && model && !image && !predictions) {\n      status = \"modelReady\";\n      statusMessage = \"Model is ready.\";\n    } else if (model && image && predictions) {\n      status = \"finished\";\n      statusMessage = \"Prediction finished.\";\n      showReset = true;\n    } else if (model && image && !predictions) {\n      status = \"modelPredict\";\n      statusMessage = \"Model is predicting...\";\n    } else {\n      status = \"modelLoad\";\n      statusMessage = \"Model is loading...\";\n    }\n  } else {\n    statusMessage = \"Unexpected error occured.\";\n    showReset = true;\n    console.log(error);\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.innercontainer}>\n        <Text style={styles.status}>\n          {statusMessage} {showReset ? resetLink : null}\n        </Text>\n        <TouchableOpacity\n          style={styles.imageContainer}\n          onPress={model && !predictions ? handlerSelectImage : () => {}} // Activates handler only if the model has been loaded and there are no predictions done yet\n        >\n          <Output\n            status={status}\n            image={image}\n            predictions={predictions}\n            error={error}\n          />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#FFFFFF\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flex: 1,\n  },\n  innercontainer: {\n    marginTop: -50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  status: { marginBottom: 10 },\n  reset: { color: \"blue\" },\n  imageContainer: {\n    width: 300,\n    height: 300,\n    borderRadius: 20,\n    opacity: 0.7,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"lightgrey\",\n    borderColor: \"white\",\n    borderWidth: 3,\n    borderStyle: \"dotted\",\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}